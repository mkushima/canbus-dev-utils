#!/usr/bin/env python3
"""
UDS Server Application

This script sets up a UDS (Unified Diagnostic Services) Server application
that listens for incoming messages on a specified CAN (Controller Area Network)
channel and responds accordingly.

Usage:
    uds-server.py -ch <CAN_CHANNEL> --rx_id <RX_ID> --tx_id <TX_ID> [-fd]

Example:
    uds-server -ch vcan0 --rx_id 18DAEE4A --tx_id 18DA4AEE

Args:
    -ch, --can_channel: CAN channel interface
    --rx_id: ID used for reception (in HEX)
    --tx_id: ID used for transmission (in HEX)
    -fd, --fd_mode: Enable FD mode (optional)
"""

import argparse
import os
import signal
import threading
import time

from logger import MyLogger
from uds.uds_server import UDSServer


# Logger setup
logger = MyLogger(os.path.basename(__file__))

exit_flag = threading.Event()


def signal_handler(sig, _frame):
    """Signal handler to gracefully stop the UDS Server."""
    logger.info(f'Received signal: {sig}. Stopping UDS Server...')
    exit_flag.set()


def get_args():
    """Parse command line arguments."""
    def hex_int(value):
        try:
            return int(value, 16)
        except ValueError as exc:
            raise argparse.ArgumentTypeError(
                f"'{value}' is not a valid hexadecimal integer") from exc

    parser = argparse.ArgumentParser(
        prog='uds-server',
        description='UDS Server application'
    )

    parser.add_argument(
        "-ch", "--can_channel",
        help="CAN channel interface",
        required=True,
        type=str
    )

    parser.add_argument(
        "--rx_id",
        help="ID used for reception (in HEX)",
        required=True,
        type=hex_int
    )

    parser.add_argument(
        "--tx_id",
        help="ID used for transmission (in HEX)",
        required=True,
        type=hex_int
    )

    parser.add_argument(
        "-fd", "--fd_mode",
        help="Enable FD mode",
        action='store_true'
    )

    return parser.parse_args()


def main():
    """Main function to start the UDS Server."""
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    args = get_args()

    can_channel = args.can_channel
    rx_id = args.rx_id
    tx_id = args.tx_id
    is_fd = args.fd_mode

    logger.info(f"Starting UDS Server: CAN interface - {can_channel}, " +
                f"Rx - {hex(rx_id)}, Tx - {hex(tx_id)}, FD - {is_fd}")

    uds_server = UDSServer(
        can_channel=can_channel,
        rx_id=rx_id,
        tx_id=tx_id,
        is_fd=is_fd,
    )

    while not exit_flag.is_set():
        uds_server.run()
        time.sleep(0.1)

    logger.info('UDS Server stopped!')


if __name__ == '__main__':
    main()
